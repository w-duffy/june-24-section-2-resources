services:

  server:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend-dev
    container_name: server
    command: "flask run --host=0.0.0.0 --port=8000"
    ports:
      - 8000:8000
    environment:
      - FLASK_DEBUG=1
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - path: requirements.txt
          action: rebuild
        - path: ./backend/
          target: /var/www/backend/
          action: sync

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: dev
    container_name: frontend
    restart: always
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/myapp
      - notused:/myapp/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      server:
        condition: service_started
    command: npm run dev

  db:
    image: postgres:16-alpine
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  notused:

secrets:
  db-password:
    file: db/password.txt
