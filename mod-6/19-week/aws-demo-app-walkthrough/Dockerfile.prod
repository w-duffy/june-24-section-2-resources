# Use a prebuilt image from Docker Hub to deploy.

# docker build --pull --rm -f "Dockerfile.prod" -t your-dockerhub-username/deploy-to-render:latest "."
# docker push your-dockerhub-username/deploy-to-render:latest

FROM node:20-bookworm-slim AS frontend-base
ENV NODE_ENV=production

FROM frontend-base AS frontend-deps
WORKDIR /myapp
ADD ./frontend/package.json ./frontend/package-lock.json ./
RUN npm install --include=dev

FROM frontend-base AS production-deps
WORKDIR /myapp
COPY --from=frontend-deps /myapp/node_modules /myapp/node_modules
COPY ./frontend/package.json ./frontend/package-lock.json ./
RUN npm prune --omit=dev

FROM frontend-base AS frontend-build
WORKDIR /myapp
COPY --from=frontend-deps /myapp/node_modules /myapp/node_modules
COPY ./frontend ./
RUN npm run build

FROM python:3.12-alpine3.20 AS base
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
RUN apk add --no-cache bash libpq

FROM base AS py-dependencies-builder
RUN apk add --no-cache build-base libpq-dev
COPY --from=ghcr.io/astral-sh/uv:0.5.0 /uv /uvx /bin/
ENV UV_SYSTEM_PYTHON=1
COPY requirements.txt .
RUN uv pip install --system --no-cache-dir -r requirements.txt psycopg2

FROM base
WORKDIR /var/www
COPY --from=py-dependencies-builder /usr/local /usr/local
COPY docker-entrypoint.sh ./docker-entrypoint.sh
RUN chmod +x ./docker-entrypoint.sh && \
    adduser -D -H -s /bin/bash myuser
USER myuser
COPY ./migrations ./migrations
COPY ./backend ./backend
COPY --from=frontend-build /myapp/dist ./frontend/dist
ENTRYPOINT ["./docker-entrypoint.sh"]
CMD ["gunicorn", "backend:app"]
